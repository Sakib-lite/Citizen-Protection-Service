type Query {
  users: [User!]!
  user: User
  complaints: [Complaint!]!
  complaint(id: ID!):Complaint
  policeStations: [PoliceStation!]!
  policeStation(id:ID!):PoliceStation
}

type Mutation {
  signup(credentials: Credentials!, name: String!): AuthPayload!
  signin(credentials: Credentials!): AuthPayload!
  policeStationCreate(
    input: StationInput!
    location: LocationInput
  ): PoliceStationPayload!
  complaintCreate(
    input: ComplaintInput!
    location: LocationInput!
  ): ComplaintPayload!
}

type User {
  id: ID!
  name: String!
  number: Float!
  role: String
  complaints: [Complaint!]!
}

type Complaint {
  id: ID!
  title: String!
  description: String!
  public: Boolean!
  location: Location!
  photos: String
  status: String!
  policeStation: PoliceStation
}

type PoliceStation {
  id: ID!
  name: String!
  number: Int!
  location: Location!
  description: String!
  address: String!
  complaints: [Complaint!]!
  street: String
  postalCode: Int!
}

type Location {
  type: String!
  coordinates: [Float]!
}
type UserError {
  message: String
}

type AuthPayload {
  userErrors: [UserError!]!
  token: String
  user: User
}
type PoliceStationPayload {
  userErrors: [UserError!]!
  policeStation: PoliceStation
}

type ComplaintPayload {
  userErrors: [UserError!]!
  complaint: Complaint
}

input Credentials {
  number: Int!
  password: String!
}

input StationInput {
  name: String!
  address: String!
  description: String!
  number: Int!
  street: String
  postalCode: Int!
}

input LocationInput {
  type: String!
  coordinates: [Float!]!
}

input ComplaintInput {
  title: String!
  description: String!
  public: Boolean!
  photos: String
}
