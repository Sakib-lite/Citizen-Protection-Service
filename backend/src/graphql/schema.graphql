scalar Upload
scalar Date

type Query {
  users: [User!]!
  user: User
  complaints: [Complaint!]!
  complaint(id: ID!): Complaint
  comments: [Comment]
  comment(id: ID!): Comment
  policeStations: [PoliceStation!]!
  policeStation(id: ID!): PoliceStation
}

type Mutation {
  signup(
    credentials: Credentials!
    name: String!
    image: [Upload]
  ): AuthPayload!
  signin(credentials: Credentials!): AuthPayload!
  policeStationCreate(
    input: StationInput!
    location: LocationInput
    image: [Upload]
  ): PoliceStationPayload!
  complaintCreate(
    input: ComplaintInput!
    location: LocationInput!
    images: [Upload]
  ): ComplaintPayload!
  complaintUpdate(id: ID!, status: String!): ComplaintPayload!
  commentCreate(input: CommentInput!): CommentPayload!
  commentUpdate(id: ID!, input: CommentUpdate): CommentPayload!
  userUpdate(id: ID!, input: UserInput!): AuthPayload!
}

type User {
  id: ID!
  name: String!
  number: Float!
  role: String!
  complaints: [Complaint!]!
  comments: [Comment!]!
  image: String
  createdAt: Date!
}

type Complaint {
  id: ID!
  title: String!
  description: String!
  public: Boolean!
  location: Location!
  images: [String]!
  author: User!
  status: String!
  comments: [Comment]!
  policeStation: PoliceStation
  createdAt: Date!
}

type PoliceStation {
  id: ID!
  name: String!
  number: Int!
  location: Location!
  description: String!
  address: String!
  complaints: [Complaint!]!
  street: String
  postalCode: Int!
  image: String!
  createdAt: Date!
}

type Location {
  type: String!
  coordinates: [Float]!
}

type Comment {
  id: ID!
  comment: String!
  complaint: Complaint!
  author: User!
  reported: Boolean!
  visible: Boolean!
  createdAt: Date!
}

type UserError {
  message: String
}

type AuthPayload {
  userErrors: [UserError!]!
  token: String
  user: User
}
type PoliceStationPayload {
  userErrors: [UserError!]!
  policeStation: PoliceStation
}

type ComplaintPayload {
  userErrors: [UserError!]!
  complaint: Complaint
}

type CommentPayload {
  userErrors: [UserError!]!
  comment: Comment
}

input Credentials {
  number: Int!
  password: String!
}

input UserInput {
  role: String
  banned: Boolean
}

input StationInput {
  name: String!
  address: String!
  description: String!
  number: Int!
  street: String
  postalCode: Int!
}

input LocationInput {
  type: String!
  coordinates: [Float!]!
}

input ComplaintInput {
  title: String
  description: String
  public: Boolean
}

input CommentInput {
  comment: String!
  complaintId: ID!
}

input CommentUpdate {
  visible: Boolean
  reported: Boolean
}
